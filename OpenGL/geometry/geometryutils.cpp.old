#include "geometryutils.h"

GeometryUtils::GeometryUtils()
{

}



std::vector<VertexData>  GeometryUtils::createSimpleBox(const QRect& box){

    double gscale = 1.0;
    QSysInfo info;
    if(info.productType()=="osx"){
        gscale = 1.0;//global_scale;
    }

       std::vector<VertexData> simple;

       VertexData v1, v2, v3, v4;
       v1.position = QVector3D(gscale * box.x(), gscale * box.y(),  0.0f);
       v1.texCoord = QVector2D(0.0f, 0.0f);

       v2.position = QVector3D( gscale * box.x(), gscale * (box.y() + box.height()),  0.0f);
       v2.texCoord = QVector2D(0.0f, 0.0f);

       v3.position = QVector3D( gscale * (box.x() + box.width()), gscale * (box.y() + box.height()),  0.0f);
       v3.texCoord = QVector2D(0.0f, 0.0f);

       v4.position = QVector3D( gscale * (box.x() + box.width()), gscale * box.y(),  0.0f);
       v4.texCoord = QVector2D(0.0f, 0.0f);


       simple.push_back(v1);
       simple.push_back(v2);
       simple.push_back(v3);
       simple.push_back(v4);

   return simple;



}


std::vector<VertexData>  GeometryUtils::createAspectRatioBox(double ratio){

    std::vector<VertexData> simple;
#if 0

   if(ratio==0){
       return createSimpleBox();

   }

   QRect box = geometry();


   VertexData v1, v2, v3, v4;

   if((double)box.width()<=(double)box.height()*ratio){
       ratio = 1.0 / ratio;

       v1.position = QVector3D(0, 0,  0.0f);
       v1.texCoord = QVector2D(0.0f, 0.0f);

       v2.position = QVector3D( 0, (double)box.width()/ratio,  0.0f);
       v2.texCoord = QVector2D(0.0f, 0.0f);

       v3.position = QVector3D( box.width(), (double)box.width()/ratio,  0.0f);
       v3.texCoord = QVector2D(0.0f, 0.0f);

       v4.position = QVector3D( box.width(), 0,  0.0f);
       v4.texCoord = QVector2D(0.0f, 0.0f);
   } else {

       v1.position = QVector3D(0, 0,  0.0f);
       v1.texCoord = QVector2D(0.0f, 0.0f);

       v2.position = QVector3D( 0, box.height(),  0.0f);
       v2.texCoord = QVector2D(0.0f, 0.0f);

       v3.position = QVector3D( (double)box.height()*ratio, box.height(),  0.0f);
       v3.texCoord = QVector2D(0.0f, 0.0f);

       v4.position = QVector3D( (double)box.width()*ratio, 0,  0.0f);
       v4.texCoord = QVector2D(0.0f, 0.0f);
   }

   simple.push_back(v1);
   simple.push_back(v2);
   simple.push_back(v3);
   simple.push_back(v4);
#endif
  return simple;
}


bool GeometryUtils::findminmax(float& minx, float& miny, float& maxx, float& maxy, const std::vector<VertexData>& pts){
   if(pts.size()==0){
       return false;
   }

   minx = maxx = pts[0].position[0];
   miny = maxy = pts[0].position[1];

   for(int i=1;i<pts.size();++i){
       if(minx>pts[i].position[0])
           minx = pts[i].position[0];
       if(maxx<pts[i].position[0])
           maxx = pts[i].position[0];
       if(miny>pts[i].position[1])
           miny = pts[i].position[1];
       if(maxy<pts[i].position[1])
           maxy = pts[i].position[1];

   }

   return true;
}

bool GeometryUtils::is_inside(float x, float y, const std::vector<VertexData>& curve){


   float minx, miny, maxx, maxy;

   if(!findminmax(minx, miny, maxx, maxy, curve)){
       return false;
   }

   if(x>=minx && x<=maxx && y>=miny && y<=maxy)
       return true;

   return false;

}


bool GeometryUtils::is_inside(float x, float y, const QRect& box){


   float minx = box.left();
   float miny = box.top();
   float maxx = box.right();
   float maxy = box.bottom();


   if(x>=minx && x<=maxx && y>=miny && y<=maxy)
       return true;

   return false;

}

